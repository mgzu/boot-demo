import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
	id 'org.springframework.boot' version "${springBootVersion}" apply false
	id 'org.graalvm.buildtools.native' version "${nativeBuildToolsVersion}" apply false
	id 'org.jetbrains.kotlin.jvm' version "${kotlinVersion}" apply false
	id 'me.champeau.jmh' version "0.7.1" apply false
	id "com.diffplug.spotless" version "6.21.0" apply false
}

allprojects {
	group = 'com.example'
	version = '0.0.1-SNAPSHOT'

	repositories {
		maven {
			url 'https://maven.aliyun.com/repository/public/'
		}
		maven {
			url 'https://maven.aliyun.com/repository/spring/'
		}
		mavenLocal()
		mavenCentral()
	}
}

ext {
	// https://mvnrepository.com/artifact/org.dromara.hutool/hutool-core
	hutoolVersion = '6.0.0-M5'
	// https://mvnrepository.com/artifact/org.mapstruct/mapstruct
	mapstructVersion = '1.5.5.Final'
	// https://mvnrepository.com/artifact/io.github.mouzt/bizlog-sdk
	bizlogSdkVersion = '3.0.6'
	// https://mvnrepository.com/artifact/org.jeasy/easy-rules-core
	easyRulesVersion = '4.1.0'
	// https://mvnrepository.com/artifact/com.google.guava/guava
	guavaVersion = '32.1.2-jre'
	// docs
	// https://mvnrepository.com/artifact/org.springdoc/springdoc-openapi-starter-webmvc-ui
	openapiVersion = '2.2.0'
	// https://mvnrepository.com/artifact/org.openjdk.jmh/jmh-core
	jmhVersion = '1.37'
}

ignoreNoSourceProject = ext.ignoreNoSourceProject.split(",")

subprojects {
	if (ignoreNoSourceProject.contains(project.name)) {
		return
	}

	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'java'
	apply plugin: 'com.diffplug.spotless'

	repositories {
		maven {
			url 'https://maven.aliyun.com/repository/public/'
		}
		maven {
			url 'https://maven.aliyun.com/repository/spring/'
		}
		mavenLocal()
		mavenCentral()
	}

	dependencyManagement {
		imports {
			mavenBom SpringBootPlugin.BOM_COORDINATES
		}
	}

	dependencies {
		// kotlin optional
		implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
		implementation 'org.jetbrains.kotlin:kotlin-reflect'

		// tool
		implementation "org.dromara.hutool:hutool-core:${hutoolVersion}"
		implementation "com.google.guava:guava:${guavaVersion}"
		implementation "org.mapstruct:mapstruct:${mapstructVersion}"
		implementation 'org.hibernate.validator:hibernate-validator'

		// dev
		compileOnly 'org.projectlombok:lombok'
		annotationProcessor 'org.projectlombok:lombok'
		annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

		// test
		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		testCompileOnly 'org.projectlombok:lombok'
		testAnnotationProcessor 'org.projectlombok:lombok'
		testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
	}

	configurations {
		compileOnly {
			extendsFrom annotationProcessor
		}
	}

	test {
		useJUnitPlatform()
	}

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	spotless {
		encoding 'UTF-8'
		java {
			// skipJavadocFormatting https://github.com/diffplug/spotless/pull/1793
			googleJavaFormat().skipJavadocFormatting()
		}
		format "properties", {
			target '**/*.properties'
			toggleOffOn()
//			encoding 'ISO-8859-1' // I don't know if this is useful
		}
	}

}

import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
	id 'org.springframework.boot' version "${springBootVersion}" apply false
//	id 'org.graalvm.buildtools.native' version "${nativeBuildToolsVersion}" apply false
	id 'org.jetbrains.kotlin.jvm' version "${kotlinVersion}" apply false
	id 'me.champeau.jmh' version "0.7.1" apply false
}

allprojects {
	group = 'com.github.mgzu'
	version = '0.0.1-SNAPSHOT'

	repositories {
		maven {
			url 'https://maven.aliyun.com/repository/public/'
		}
		maven {
			url 'https://maven.aliyun.com/repository/spring/'
		}
		mavenLocal()
		mavenCentral()
	}
}

ext {
	// https://mvnrepository.com/artifact/org.dromara.hutool/hutool-core
	hutoolVersion = '6.0.0-M5'
	// https://mvnrepository.com/artifact/org.mapstruct/mapstruct
	mapstructVersion = '1.5.5.Final'
	// https://mvnrepository.com/artifact/io.github.mouzt/bizlog-sdk
	bizlogSdkVersion = '3.0.6'
	// https://mvnrepository.com/artifact/org.jeasy/easy-rules-core
	easyRulesVersion = '4.1.0'
	// https://mvnrepository.com/artifact/com.google.guava/guava
	guavaVersion = '32.1.2-jre'
	// docs
	// https://mvnrepository.com/artifact/org.springdoc/springdoc-openapi-starter-webmvc-ui
	openapiVersion = '2.2.0'
	// https://mvnrepository.com/artifact/org.openjdk.jmh/jmh-core
	jmhVersion = '1.37'
	jetbrainsAnnotationsVersion = '24.0.1'
	// https://mvnrepository.com/artifact/cn.dev33/sa-token-spring-boot-starter
	saTokenVersion = '1.37.0'
	okhttpVersion = '5.0.0-alpha.11'
	meilisearchJavaVersion = '0.11.3'
}

ignoreNoSourceProject = ext.ignoreNoSourceProject.split(",")

subprojects {
	if (ignoreNoSourceProject.contains(project.name)) {
		return
	}
	def applyMavenPublish = !project.name.startsWith(ext.bizProjectPrefix)

	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'java'
	if (applyMavenPublish) {
		apply plugin: 'maven-publish'
	}

	repositories {
		maven {
			url 'https://maven.aliyun.com/repository/public/'
		}
		maven {
			url 'https://maven.aliyun.com/repository/spring/'
		}
		mavenLocal()
		mavenCentral()
	}

	dependencyManagement {
		imports {
			mavenBom SpringBootPlugin.BOM_COORDINATES
		}
	}

	dependencies {
		// kotlin optional
		implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"

		// tool
		implementation "org.dromara.hutool:hutool-core:${hutoolVersion}"
		implementation "com.google.guava:guava:${guavaVersion}"
		implementation "org.mapstruct:mapstruct:${mapstructVersion}"
		implementation 'org.hibernate.validator:hibernate-validator'
		implementation "org.jetbrains:annotations:${jetbrainsAnnotationsVersion}"

		// dev
		compileOnly 'org.projectlombok:lombok'
		annotationProcessor 'org.projectlombok:lombok'
		annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

		// test
		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		testImplementation "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
		testCompileOnly 'org.projectlombok:lombok'
		testAnnotationProcessor 'org.projectlombok:lombok'
		testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
	}

	configurations {
		compileOnly {
			extendsFrom annotationProcessor
		}
	}

	test {
		useJUnitPlatform()
	}

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21

	jar {
		duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
	}

	if (applyMavenPublish) {
		def localProperties = project.rootProject.file('local.properties')
		if (!localProperties.exists()) {
			return
		}
		publishing {
			Properties properties = new Properties()
			properties.load(localProperties.newDataInputStream())
			repositories {
				maven {
					name = "GitHubPackages"
					url = uri("https://maven.pkg.github.com/mgzu/boot-demo")
					credentials {
						username = properties.getProperty("GITHUB_USERNAME")
						password = properties.getProperty("GITHUB_TOKEN")
					}
				}
			}
			publications {
				gpr(MavenPublication) {
					from(components.java)
				}
			}
		}
	}

}
